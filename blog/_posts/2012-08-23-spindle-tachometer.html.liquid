---
layout: content
title: A Spindle Tachometer for the Lathe
---

<p>Today I got some work done on a project that I have had in my head for a few weeks. 
The basic idea is to electronically control the leadscrew on my small lathe, so that I 
can dial in specific feedrates and thread-pitches with ease.</p>

<p>The first step was to see whether it was even feasible to build a tachometer using
a microcontroller (I used an Arduino Uno). I assumed it was, but needed to validate my 
assumptions. The video below shows the prototype tachometer working fairly well!</p>

<div class="video">
  <iframe width="560" height="315" src="http://www.youtube.com/embed/videoseries?list=UU2YzIih9K5363N4n3ERmhMA&amp;hl=en_US" frameborder="0" allowfullscreen></iframe>
</div>

<p>The timing disk was made from HDPE sheet cut on my CNC router, designing it took longer than
machining it, and the whole affair was over in less than 30 minutes. It's jobs like this
that make you really thankful to have a CNC machine at hand!</p>

<p>The next step will be to machine a proper timing disk, then a mount for the photo-interrupter, then 
purchase a decent single-axis stepper drive (I'm leaning toward
a Geckodrive G203V) and a matching stepper motor. I have already fabricated a proper
low-backlash acme leadscrew and mounted it to the lathe with custom bearing blocks.
It's all a bit 'lashed-together' right now, but it's intended merely as a proof-of-concept.</p>

<h2>Files:</h2>
<p>I will upload a DXF of the timing disk soon!</p>

<h2>Bill Of Materials:</h2>
<p>
  <ul>
    <li><a href="https://www.sparkfun.com/products/9067">Serial-enabled LCD</a></li>
    <li><a href="https://www.sparkfun.com/products/11286?">Arduino Uno/Leonardo (Leonardo preferred because of its accurate clock)</a></li>
    <li><a href="https://www.sparkfun.com/products/9299?">Photo Interrupter GP1A57HRJ00F</a></li>
    <li>Some sort of durable opaque plastic sheet for the timing disk...</li>
  </ul>
</p>

<h2>Code:</h2>

<p>Below is the fairly simple Arduino code that I'm using in the tachometer thus far, it's
bound to get more complex in short order...</p>

#include <SoftwareSerial.h>
#include <serLCD.h>

int lcdTxPin = 2;
int tachPin = 3;

volatile int pulseCount = 0;
volatile unsigned long samplePeriodStart = 0;
volatile unsigned long pulsePeriod = 0;
unsigned long rpm = 0;

int pulsesPerRevolution = 50;
int pulseSampleSize = 20;
int minRpm = 10;

serLCD lcd(lcdTxPin);

void setup(){
  lcd.clear();
  lcd.setBrightness(30);
  pinMode(tachPin, INPUT);
  attachInterrupt(1, registerTachPulse, FALLING);
  
  samplePeriodStart = micros();
}

void loop(){
  if(pulsePeriod > 0){
    rpm = 60000000 / pulsePeriod;
    rpm = rpm / pulsesPerRevolution;
  }
  
  if((micros() - samplePeriodStart) > ((60000000 / (minRpm * pulsesPerRevolution)) * pulseSampleSize)){
    rpm = 0;
  }
  
  lcd.clear();
  lcd.print("RPM: ");
  lcd.print(rpm);
  delay(100);
}

void registerTachPulse(){
  pulseCount++;
  
  if(pulseCount == pulseSampleSize){
    pulsePeriod = micros() - samplePeriodStart;
    pulsePeriod = pulsePeriod / pulseSampleSize;
    pulseCount = 0;
    samplePeriodStart = micros();  
  }
}